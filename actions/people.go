package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
	"github.com/theothertomelliott/giftlist/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Person)
// DB Table: Plural (people)
// Resource: Plural (People)
// Path: Plural (/people)
// View Template Folder: Plural (/templates/people/)

// PeopleResource is the resource for the Person model
type PeopleResource struct {
	buffalo.Resource
}

// List gets all Persons. This function is mapped to the path
// GET /people
func (v PeopleResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	people := &models.Persons{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Persons from the DB
	if err := q.Where("user_id = ?", getCurrentUserID(c)).All(people); err != nil {
		return errors.WithStack(err)
	}

	// Make Persons available inside the html template
	c.Set("people", people)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("people/index.html"))
}

// Show gets the data for one Person. This function is mapped to
// the path GET /people/{person_id}
func (v PeopleResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Person
	person := &models.Person{}

	// To find the Person the parameter person_id is used.
	if err := tx.Find(person, c.Param("person_id")); err != nil {
		return c.Error(404, err)
	}

	if person.UserID != getCurrentUserID(c) {
		c.Flash().Add("danger", "You are not authorized to view that page")
		return c.Redirect(302, "/")
	}

	// Make person available inside the html template
	c.Set("person", person)

	return c.Render(200, r.HTML("people/show.html"))
}

// New renders the form for creating a new Person.
// This function is mapped to the path GET /people/new
func (v PeopleResource) New(c buffalo.Context) error {

	// Make person available inside the html template
	c.Set("person", &models.Person{
		UserID: getCurrentUserID(c),
	})

	return c.Render(200, r.HTML("people/new.html"))
}

// Create adds a Person to the DB. This function is mapped to the
// path POST /people
func (v PeopleResource) Create(c buffalo.Context) error {
	// Allocate an empty Person
	person := &models.Person{}

	// Bind person to the html form elements
	if err := c.Bind(person); err != nil {
		return errors.WithStack(err)
	}

	if person.UserID != getCurrentUserID(c) {
		c.Flash().Add("danger", "You are not authorized to perform that action")
		return c.Redirect(302, "/")
	}

	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(person)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make person available inside the html template
		c.Set("person", person)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("people/new.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Person was created successfully")

	return c.Redirect(302, "/people/%s", person.ID)
}

// Edit renders a edit form for a Person. This function is
// mapped to the path GET /people/{person_id}/edit
func (v PeopleResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Person
	person := &models.Person{}

	if err := tx.Find(person, c.Param("person_id")); err != nil {
		return c.Error(404, err)
	}

	if person.UserID != getCurrentUserID(c) {
		c.Flash().Add("danger", "You are not authorized to view that page")
		return c.Redirect(302, "/")
	}

	// Make person available inside the html template
	c.Set("person", person)
	return c.Render(200, r.HTML("people/edit.html"))
}

// Update changes a Person in the DB. This function is mapped to
// the path PUT /people/{person_id}
func (v PeopleResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Person
	person := &models.Person{}

	if err := tx.Find(person, c.Param("person_id")); err != nil {
		return c.Error(404, err)
	}

	if person.UserID != getCurrentUserID(c) {
		c.Flash().Add("danger", "You are not authorized to perform that action")
		return c.Redirect(302, "/")
	}

	// Bind Person to the html form elements
	if err := c.Bind(person); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(person)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make person available inside the html template
		c.Set("person", person)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("people/edit.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Person was updated successfully")

	// and redirect to the people index page
	return c.Redirect(302, "/people/%s", person.ID)
}

// Destroy deletes a Person from the DB. This function is mapped
// to the path DELETE /people/{person_id}
func (v PeopleResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Person
	person := &models.Person{}

	// To find the Person the parameter person_id is used.
	if err := tx.Find(person, c.Param("person_id")); err != nil {
		return c.Error(404, err)
	}

	if person.UserID != getCurrentUserID(c) {
		c.Flash().Add("danger", "You are not authorized to perform that action")
		return c.Redirect(302, "/")
	}

	if err := tx.Destroy(person); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Person was destroyed successfully")

	// Redirect to the people index page
	return c.Redirect(302, "/people")
}

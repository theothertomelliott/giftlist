package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
	"github.com/theothertomelliott/giftlist/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Budget)
// DB Table: Plural (budgets)
// Resource: Plural (Budgets)
// Path: Plural (/budgets)
// View Template Folder: Plural (/templates/budgets/)

// BudgetsResource is the resource for the Budget model
type BudgetsResource struct {
	buffalo.Resource
}

// List gets all Budgets. This function is mapped to the path
// GET /budgets
func (v BudgetsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	budgets := &models.Budgets{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Budgets from the DB
	if err := q.All(budgets); err != nil {
		return errors.WithStack(err)
	}

	// Make Budgets available inside the html template
	c.Set("budgets", budgets)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("budgets/index.html"))
}

// Show gets the data for one Budget. This function is mapped to
// the path GET /budgets/{budget_id}
func (v BudgetsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Budget
	budget := &models.Budget{}

	// To find the Budget the parameter budget_id is used.
	if err := tx.Find(budget, c.Param("budget_id")); err != nil {
		return c.Error(404, err)
	}

	// Make budget available inside the html template
	c.Set("budget", budget)

	return c.Render(200, r.HTML("budgets/show.html"))
}

// New renders the form for creating a new Budget.
// This function is mapped to the path GET /budgets/new
func (v BudgetsResource) New(c buffalo.Context) error {
	// Make budget available inside the html template
	c.Set("budget", &models.Budget{})

	// Get a db connection and make the people map available
	tx := c.Value("tx").(*pop.Connection)
	people, err := buildPersonMap(tx)
	if err != nil {
		return c.Error(404, err)
	}
	c.Set("people", people)
	// Make the events map available to templates
	events, err := buildEventsMap(tx)
	if err != nil {
		return c.Error(404, err)
	}
	c.Set("events", events)

	return c.Render(200, r.HTML("budgets/new.html"))
}

// Create adds a Budget to the DB. This function is mapped to the
// path POST /budgets
func (v BudgetsResource) Create(c buffalo.Context) error {
	// Allocate an empty Budget
	budget := &models.Budget{}

	// Bind budget to the html form elements
	if err := c.Bind(budget); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(budget)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make budget available inside the html template
		c.Set("budget", budget)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("budgets/new.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Budget was created successfully")

	// and redirect to the budgets index page
	return c.Redirect(302, "/budgets/%s", budget.ID)
}

// Edit renders a edit form for a Budget. This function is
// mapped to the path GET /budgets/{budget_id}/edit
func (v BudgetsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Budget
	budget := &models.Budget{}

	if err := tx.Find(budget, c.Param("budget_id")); err != nil {
		return c.Error(404, err)
	}

	// Make budget available inside the html template
	c.Set("budget", budget)

	// Make the people map available to templates
	people, err := buildPersonMap(tx)
	if err != nil {
		return c.Error(404, err)
	}
	c.Set("people", people)
	// Make the events map available to templates
	events, err := buildEventsMap(tx)
	if err != nil {
		return c.Error(404, err)
	}
	c.Set("events", events)

	return c.Render(200, r.HTML("budgets/edit.html"))
}

// Update changes a Budget in the DB. This function is mapped to
// the path PUT /budgets/{budget_id}
func (v BudgetsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Budget
	budget := &models.Budget{}

	if err := tx.Find(budget, c.Param("budget_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Budget to the html form elements
	if err := c.Bind(budget); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(budget)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make budget available inside the html template
		c.Set("budget", budget)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("budgets/edit.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Budget was updated successfully")

	// and redirect to the budgets index page
	return c.Redirect(302, "/budgets/%s", budget.ID)
}

// Destroy deletes a Budget from the DB. This function is mapped
// to the path DELETE /budgets/{budget_id}
func (v BudgetsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Budget
	budget := &models.Budget{}

	// To find the Budget the parameter budget_id is used.
	if err := tx.Find(budget, c.Param("budget_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(budget); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Budget was destroyed successfully")

	// Redirect to the budgets index page
	return c.Redirect(302, "/budgets")
}
